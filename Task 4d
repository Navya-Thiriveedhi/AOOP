from flask import Flask, jsonify, request
from models import db, Item  # Assuming you're using SQLAlchemy for models

app = Flask(__name__)

# List all items
@app.route('/items', methods=['GET'])
def list_all_items():
    items = Item.query.all()
    return jsonify([item.serialize() for item in items]), 200

# List items by name
@app.route('/items/name', methods=['GET'])
def list_items_by_name():
    name = request.args.get('name')
    if not name:
        return jsonify({"message": "Name parameter is required"}), 400
    
    items = Item.query.filter(Item.name.ilike(f"%{name}%")).all()
    if not items:
        return jsonify({"message": "No items found with that name"}), 404
    
    return jsonify([item.serialize() for item in items]), 200

# List items by category
@app.route('/items/category', methods=['GET'])
def list_items_by_category():
    category = request.args.get('category')
    if not category:
        return jsonify({"message": "Category parameter is required"}), 400
    
    items = Item.query.filter_by(category=category).all()
    if not items:
        return jsonify({"message": "No items found in that category"}), 404
    
    return jsonify([item.serialize() for item in items]), 200

# List items by availability (in stock or out of stock)
@app.route('/items/availability', methods=['GET'])
def list_items_by_availability():
    availability = request.args.get('availability')
    if availability not in ['in_stock', 'out_of_stock']:
        return jsonify({"message": "Availability must be 'in_stock' or 'out_of_stock'"}), 400
    
    if availability == 'in_stock':
        items = Item.query.filter(Item.stock > 0).all()
    else:
        items = Item.query.filter(Item.stock == 0).all()
    
    return jsonify([item.serialize() for item in items]), 200

if __name__ == '__main__':
    app.run(debug=True)
